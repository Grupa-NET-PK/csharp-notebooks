#!markdown

# Hello World - speedcore

Czyli wstęp do C# na z pełną prędkością.

0. Konsola
1. Zmienne
2. Liczby i operacje na liczbach
3. Łańcuchy i operacje na łańcuchach
4. Klasa, interfejs, enum
5. Modyfikatory dostępu - basics
6. IEnumerable vs ICollection vs IList
7. Słownik

Jak to działa? Kliknij "play" przy fragmencie kodu. Zmodyfikuj go i sprawdź co się stanie.

#!csharp

Console.WriteLine("Hello World!");

#!markdown

## 0. Konsola

Klasyczny wydruk na konsolę. Poza tym często wykorzystywane jest również `Console.ReadLine()`, `Console.ReadKey()` oraz `Console.Write()` - to akurat do dołączenia zawartości do ostatnio wydrukowanego tekstu.

### Zadanie

Napisz program, który zapyta użytkownika o imię, a następnie wypisze: `Witaj, {imię}!`

#!csharp

var name = "imię";
Console.WriteLine($"Witaj, {name}!");

#!markdown

## 1. Zmienne

Każdy typ danych w języku C# da się zapisać do zmiennej typu `var`, której typ kompilator domyśla się samodzielnie. Jest to obecnie sugerowane rozwiązanie, kiedy piszesz kod w np. Visual Studio 2019.

#!csharp

var number = 20;
var text = "text";
var letter = 'c';
var array = new[] { "a", "b", "c"};
var dictionary = new Dictionary<string, string>() { {"a", "hello"}};
var differentType = new object();

#!markdown

Jedyne czego nie można wykonywać to do zmiennej "typu" var przypisywać wartości `null` ponieważ kompilator nie będzie w stanie ustalić jej typu i rzuci błędem.

#!csharp

var error = null;

#!markdown

## 2. Liczby i operacje na liczbach

Jeżeli programujesz już w języku C/C++ albo Javie to znasz już wszystkie podstawowe typy danych liczbowych. 

#!csharp

byte reallySmall = (byte) 126;
short small = 1000;
int number = 10;
long bigNumber = 10000000;
float commaNumber = 123.45f;
double biggerComma = 1234.5678d;
decimal bigbignumber = 123456.123456m;

#!markdown

### Zadanie 1

Napisz program, który doda do siebie byte, short, int i long. Zapisze wartość do longa i do byte'a. Każdą ze zmiennych wyświetli w konsoli.

#!csharp

byte colorCode = 10;
// Kod

Console.WriteLine("Byte:" + colorCode);
Console.WriteLine("Long: " + colorCode);

#!markdown

### Zadanie 2

Korzystając ze statycznych metod klasy `Convert` zamień tekst na int oraz double. Przekonwertowane wyniki wyświetl w konsoli.

Sugestia: Domyślnie w VS Code powinien działać system podpowiedzi kontekstowych IntelliSense, który pokaże Ci listę dostępnych metod do użycia. Jeżeli wciąż Ci się nie wyświetla, zgłoś problem prowadzącemu. 

#!csharp

string integerValue = "123";
string decimalValue = "33,12";

var convertedInt = Convert.ToInt32(integerValue);
var hexString = Convert.ToHexString(new [] { (byte) convertedInt });
var convertedDecimal = Convert.ToDecimal(decimalValue);
Console.WriteLine($"Int: {convertedInt}, hex: {hexString}, decimal: {convertedDecimal}");

#!markdown

## 2. Łańcuchy i operacje na łańcuchach

Łańcuchy możesz znać z języka C++ albo Javy. W języku C łańcuchy w podstawowej wersji występują jako wskaźniki na tablice znaków. Przykładowy łańcuch.

#!csharp

var text = "Just a simple string";

#!markdown

W C# również działa zasada, że tekst to tablica znaków. Możemy więc wydrukować każdy z osobna w nowej lini.

#!csharp

var shortText = "Hello";
foreach (var letter in shortText)
{
    Console.WriteLine(letter);
}

#!markdown

## Operacje - Interpolacja

Może już kiedyś korzystałeś z łączenia łańcuchów z innymi łańcuchami przy pomocy `+` aby połączyć kilka zmiennych ze sobą. Od C# w wersji 6 czyli od czerwca 2015 jest na to lepszy sposób - nazywa się interpolacja łańcuchów, z angielskiego **string interpolation**. 

Jak to działa? Przed cudzysłowiem oznaczającym łańcuch dodajesz `$`, a zmienne, które chcesz dodać wpisujesz w `{`oraz `}`. Krótki przykład.

#!csharp

var friend = "Rupert";
Console.WriteLine($"Hello {friend}!");

#!markdown

Zamiennie z interpolacją kiedyś stosowano formatowanie. Drukując w konsoli możesz skorzystać z wbudowanego formatowania. Jeżeli chcesz tylko zapisać zmienną, robisz to trochę inaczej. Przykłady:

#!csharp

var name = "Rupert";
var place = "Politechnika Koszalińska";
var time = "8 AM";
var stringFormatting = string.Format("Let's meet with {0} at {1} at {2}", name, place, time);
Console.WriteLine(stringFormatting);

Console.WriteLine("Let's meet with {0} at {1} at {2}", name, place, time);

#!markdown

## Operacje - ToLower(), ToUpper() oraz Replace()

Z tych funkcji prawdopodobnie będziesz korzystać najczęściej.

`ToLower()` - zamiana wszystkich liter na małe

`ToUpper()` - zamiana wszystkich liter na duże

`Replace(toReplace)` - zamiana jakiegokolwiek ciągu z

#!csharp

var text = "PeteR";
var lower = text.ToLower();
var upper = text.ToUpper();
var onlySpolgloski = text.Replace("e", "");
Console.WriteLine($"Lower: {lower}, upper: {upper}, replace: {onlySpolgloski}");

#!markdown

## Operacje - Split

Czasami potrzebujesz oddzielić wyrazy w tekście wpisanym przez użytkownika. Prosty przykład - program konsolowy, użytkownik podaje argumenty startowe programu. Jak odczytać taki tekst i wyłuskać wartości startowe?

#!csharp

var textArgs = "--delay=10 --shutdown=100 --generator=Console";
var args = textArgs.Split(" ");
foreach(var arg in args)
{
    Console.WriteLine(arg);
}

#!markdown

## 4. Klasa, interfejs, enum

Klasa jest dokładnie tym samym co klasa w Javie. Owszem, w języku C++ klasa spełnia podobne zadanie, ale w C# nie deklaruje się pliku nagłówkowego dla klasy. Klasa może być pusta, ale w większości przypadków ma w sobie jakieś `properties` czyli pola, może jakieś prywatne zmienne. Może posiadać konstruktor - ale **uwaga dla Javowców** nie musi posiadać. Oprócz tego w klasie zazwyczaj znajdziemy jakieś metody.

#!csharp

class Car {
    public string Mark { get; set; }
    public string Model { get; set; }
    public string Owner { get; set; }

    // public Car(string mark, string model, string owner) {
    //     Mark = mark;
    //     Model = model;
    //     Owner = owner;
    // }

    public string Describe() {
        return $"The owner of {Mark} {Model} is {Owner}";
    }
}

// var bentley = new Car("Bentley", "X0", "Mark Zuckerberg");
// Console.WriteLine(bentley.Describe());

var ferrari = new Car { Mark = "Ferrari", Model = "Testarossa", Owner = "Rafał" };
Console.WriteLine(ferrari.Describe());

#!markdown

## 5. Modyfikatory dostępu - basics

#!markdown

## 6. Kolekcje

W C# mamy kilka różnych rodzajów kolekcji. Najprotszą z nich jest tablica (1). Jeżeli potrzebujemy mieć możliwość dynamicznego dodawnia / usuwania elementów ze zbioru przyda nam się Lista (2). Istnieją jeszcze wariacje tych typów. Możemy użyć Hashsetu - który ma bardzo krótki czas dostępu do danych za sprawą hashowania (indeksowania) danych, które do niego dodajemy. (3). Istnieje również coś takiego jak ArrayList (4). Ostatnim rodzajem kolekcji jest SortedList, który wraz z dodawaniem elementów od razu dodaje element w odpowiednie miejsce, wg klucza. Lista jest sortowana rosnąco - ascending (5). Minus jest taki, że nie możemy dodać elementu o tym samym kluczu.

#!csharp

var array = new[] { 1, 2, 3 };
var list = new List<int>() { 1, 2, 3 };
var hashSet = new HashSet<int>() { 1, 2, 3 };
Console.WriteLine(string.Join(", ", hashSet.ToArray()));

var arrayList = new ArrayList() { "a", 10, true };
Console.WriteLine(string.Join(", ", arrayList.ToArray()));
Console.WriteLine("Tylko liczby: " + string.Join(", ", arrayList.OfType<int>()));

var sortedList = new SortedList<int, string>();
sortedList.Add(10, "Tomasz");
sortedList.Add(-3, "Julia");
sortedList.Add(11, "Dagmara");
foreach(var entry in sortedList.Select(kv => $"{kv.Key}: {kv.Value}")) {
    Console.WriteLine(entry);
}

#!markdown

Bardzo często korzysta się z metody `string.Join()`, aby wyświetlić wszystkie elementy listy / tablicy / kolekcji w jednej lini. Przykład:

#!csharp

var names = new[] { "James", "Jessica", "Brian", "Karen"};
Console.WriteLine(string.Join(", ", names));

#!markdown

### Zadanie

Stwórz listę sześciu pierwszych elementów ciągu fibonacciego (jak nie wiesz co to - odsyłam do wujka google) - wypisz je w podobny sposób (po przecinku) jak w przykładzie wyżej.

#!csharp

// twój kod

#!markdown

## 7. Słownik

Słownik jest złożonym typem danych, który bardzo często przydaje się w pracy samodzielnej oraz pracy w firmach. Prosty przykład wykorzystania słownika. Po słownikach można iterować, można dopisywać do nich klucze oraz pobierać wartości po kluczach.

Warto korzystać z metody TryGetValue ponieważ w ten sposób unikamy ewentualnego Exceptiona na wypadek braku takiego klucza.

#!csharp

var nameAgeDictionary = new Dictionary<string, int>()
{
    { "Marek", 33 },
    { "Tomasz", 22 },
    { "Julia", 18 }
};

nameAgeDictionary.Add("Adrian", 40); // dodanie

var value = nameAgeDictionary["Marek"];

int mareksAge;
if (nameAgeDictionary.TryGetValue("Marek", out mareksAge)) {
    Console.WriteLine(mareksAge);
}

var amount = int.Parse("12");
int amount2;
int.TryParse("12", out amount2);

#!markdown

### Zadanie 1

Stworz słownik, którego kluczami będą języki programowania. Wartościami będzie wartość od 0 do 1 (double) twój poziom znajomości tych języków. Zawartość słownika wydrukuj w konsoli w sposób: `{klucz}: {wartość}`

#!csharp

// twój kod

#!markdown

### Zadanie 2

Dodaj do słownika 2 nowe wpisy korzystając z metody `Add()`, wyświetl jego zawartość w konsoli. Następnie usuń pierwszy wpis korzystając z metody `Remove()` i wyświetl zawartość tego słownika.

#!csharp

var dogNamePopularity = new Dictionary<string, int>()
{
    { "Misiek", 10},
    { "Reks", 6},
    { "Klusek", 8},
    { "Burek", 15}
};

#!markdown

### Zadanie 3

Korzystając z wiedzy z rozdziału o listach, wydrukuj zawartość słownika dogNamePropositions. Stwórz drugi słownik, do którego będziesz zapisywać ile razy padała dana propozycja psiego imienia.

UWAGA! Liczenie ręczne odpada.

#!csharp

var dogNamePropositions = new Dictionary<string, IEnumerable<string>>() 
{
    { "Maria", new[] { "Klusek", "Roxi", "Bambino" }},
    { "Tomek", new[] { "Reks", "Burek", "Tosia" }},
    { "Dariusz", new[] { "Burek", "Klusek", "Roxi" }},
    { "Agnieszka", new[] { "Wawa", "Malinka", "Roxi" }}
};

#!markdown

# Playground: Try it yourself

Each module will have a little "playground" at the end. This is a space for you to try writing some code yourself, instead of looking at prewritten code.
Try out printing words and variables! Here are some prompts to try:
> Print out a personal motto.
>
> Make some variables with your favorite foods, and then write a little story involving them.
>
> **Challenge!**
>
> Make your own Mad Libs! Make a few variables that are verbs, nouns, etcetera, and then use them when you write a story. Have a friend decide the value of each variable and read it to them for a laugh!

#!csharp

Console.WriteLine("Playground");
